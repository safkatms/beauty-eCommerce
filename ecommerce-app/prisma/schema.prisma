datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User Model
model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
}

// Role Enum
enum Role {
  ADMIN
  CUSTOMER
}

model Product {
  id               Int             @id @default(autoincrement())
  name             String
  brandId          Int
  brand            Brand           @relation(fields: [brandId], references: [id], onDelete: Cascade)
  productSerialNo  String          @unique
  subCategoryId    Int
  subCategory      SubCategory     @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  categoryId       Int
  category         Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  purchasePrice    Decimal         @db.Decimal(10,2)
  sellingPrice     Decimal         @db.Decimal(10,2)
  discount         Decimal?        @db.Decimal(5,2)
  priceAfterDiscount Decimal?      @db.Decimal(10,2) @default(0)
  hasVariants      Boolean         @default(false)
  quantity         Int?            // Used only for non-variant products
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  images           ProductImage[]  // Multiple images for the product
  variants         ProductVariant[] // Variants for products like Lipstick
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  imageUrl  String   // URL of the image stored in Firebase
}

model ProductVariant {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  shade     String   // Shade name for variants (e.g., Red, Pink)
  quantity  Int      // Quantity for each variant (shade)
  imageUrl  String?  // Optional: Image URL for the variant (e.g., image of Red shade)
}


// Brand Model
model Brand {
  id   Int  @id @default(autoincrement())
  name String  @unique
  products Product[]

  @@index([name])
}

// Category Model
model Category {
  id   Int @id @default(autoincrement())
  name String @unique
  subCategories SubCategory[]
  products Product[]

  @@index([name])
}

// SubCategory Model
model SubCategory {
  id         Int @id @default(autoincrement())
  name       String @unique
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products   Product[]

  @@index([name])
}
