datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int       @id @default(autoincrement())
  name         String
  email        String    @unique
  password     String
  role         Role      @default(CUSTOMER)
  phone        String?   // Optional phone number
  profileImage String?   // URL to profile picture
  status       UserStatus @default(ACTIVE) // Account status
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relationships
  addresses         Address[]         // User's addresses
  reviews           Review[]          // User's reviews
  questionsAndAnswers QuestionAnswer[] // User's questions and answers
  orders            Order[]           // User's orders

  @@index([email])
}

model Address {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  street     String
  city       String
  state      String
  zipCode    String
  country    String
  addressType AddressType @default(HOME) // Home, Work, etc.
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
}


// Role Enum
enum Role {
  ADMIN
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum AddressType {
  HOME
  WORK
  BILLING
  SHIPPING
  OTHER
}


model Product {
  id               Int             @id @default(autoincrement())
  name             String
  brandId          Int
  brand            Brand           @relation(fields: [brandId], references: [id], onDelete: Cascade)
  productSerialNo  String          @unique
  subCategoryId    Int
  subCategory      SubCategory     @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  categoryId       Int
  category         Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  purchasePrice    Float
  sellingPrice     Float
  discount         Float?
  priceAfterDiscount Float?        @default(0)
  hasVariants      Boolean         @default(false)
  quantity         Int?            // Used only for non-variant products
  description      String?         // Product description
  ingredients      String?         // Ingredients if applicable
  totalSold        Int             @default(0) // New field to track sales count
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  images           ProductImage[]
  variants         ProductVariant[]
  reviews          Review[]
  questionsAndAnswers QuestionAnswer[]
  orderItems       OrderItem[]

  @@index([productSerialNo])
}

model Order {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItems  OrderItem[]

  @@index([userId])
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  orderId    Int
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId  Int
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity   Int
  price      Float

  @@index([orderId])
  @@index([productId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELED
}


model Review {
  id         Int      @id @default(autoincrement())
  productId  Int
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId     Int?     // Optional for guest users
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  guestName  String?  // Guest user's name
  rating     Int      // Rating from 1 to 5
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([productId])
}


model QuestionAnswer {
  id         Int      @id @default(autoincrement())
  productId  Int
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question   String
  answer     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([productId])
}


model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  imageUrl  String   // URL of the image stored in Firebase
}

model ProductVariant {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  shade     String   // Shade name for variants (e.g., Red, Pink)
  quantity  Int      // Quantity for each variant (shade)
  imageUrl  String?  // Optional: Image URL for the variant (e.g., image of Red shade)
}


// Brand Model
model Brand {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  imageUrl String? // Optional field to store image path
  products Product[]

  @@index([name])
}

// Category Model
model Category {
  id            Int    @id @default(autoincrement())
  name          String @unique
  imageUrl      String? // Add image URL field
  subCategories SubCategory[]
  products      Product[]

  @@index([name])
}


// SubCategory Model
model SubCategory {
  id         Int    @id @default(autoincrement())
  name       String @unique
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products   Product[]
  imageUrl   String?  // New field for storing Cloudinary URL

  @@index([name])
}
